type CacheKey = string | symbol;
type Config<TInput extends unknown[], TIterable extends AsyncIterable<unknown>> = Readonly<{
    getAbortSignalFromInputArgs: (...args: TInput) => AbortSignal;
    getCacheKeyFromInputArgs: (...args: TInput) => CacheKey | undefined;
    onCacheHit: (iterable: TIterable, ...args: TInput) => Promise<void>;
    onCreateIterable: (abortSignal: AbortSignal, ...args: TInput) => Promise<TIterable>;
}>;
export declare function getCachedAbortableIterableFactory<TInput extends unknown[], TIterable extends AsyncIterable<unknown>>({ getAbortSignalFromInputArgs, getCacheKeyFromInputArgs, onCacheHit, onCreateIterable, }: Config<TInput, TIterable>): (...args: TInput) => Promise<TIterable>;
export {};
//# sourceMappingURL=cached-abortable-iterable.d.ts.map