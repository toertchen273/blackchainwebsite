// src/resolve-transaction-error.ts
function resolveTransactionError(error, transaction, programs) {
  const fullLogs = error.message + "\n" + (error.logs ?? []).join("\n");
  const instructionRegex = /Error processing Instruction (\d+)/;
  const instructionIndexString = fullLogs.match(instructionRegex)?.[1] ?? null;
  const instructionIndex = instructionIndexString ? parseInt(instructionIndexString, 10) : null;
  if (instructionIndex === null)
    return error;
  const errorCodeRegex = /Custom program error: (0x[a-f0-9]+)/i;
  const errorCodeString = fullLogs.match(errorCodeRegex)?.[1] ?? null;
  const errorCode = errorCodeString ? parseInt(errorCodeString, 16) : null;
  if (errorCode === null)
    return error;
  const programAddress = transaction.instructions[instructionIndex]?.programAddress ?? null;
  if (!programAddress)
    return error;
  const program = programs.find(
    (program2) => program2.address === programAddress && typeof program2.getErrorFromCode !== "undefined"
  ) ?? null;
  if (!program)
    return error;
  return program.getErrorFromCode(errorCode, error);
}

export { resolveTransactionError };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.native.js.map