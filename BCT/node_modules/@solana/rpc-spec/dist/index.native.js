import { getSolanaErrorFromJsonRpcError } from '@solana/errors';
import { createRpcMessage } from '@solana/rpc-spec-types';

// src/rpc.ts
function createRpc(rpcConfig) {
  return makeProxy(rpcConfig);
}
function makeProxy(rpcConfig) {
  return new Proxy(rpcConfig.api, {
    defineProperty() {
      return false;
    },
    deleteProperty() {
      return false;
    },
    get(target, p, receiver) {
      return function(...rawParams) {
        const methodName = p.toString();
        const createRpcRequest = Reflect.get(target, methodName, receiver);
        const newRequest = createRpcRequest ? createRpcRequest(...rawParams) : { methodName, params: rawParams };
        return createPendingRpcRequest(rpcConfig, newRequest);
      };
    }
  });
}
function createPendingRpcRequest(rpcConfig, pendingRequest) {
  return {
    async send(options) {
      const { methodName, params, responseTransformer } = pendingRequest;
      const payload = createRpcMessage(methodName, params);
      const response = await rpcConfig.transport({
        payload,
        signal: options?.abortSignal
      });
      if ("error" in response) {
        throw getSolanaErrorFromJsonRpcError(response.error);
      }
      return responseTransformer ? responseTransformer(response.result, methodName) : response.result;
    }
  };
}

// src/rpc-api.ts
function createRpcApi(config) {
  return new Proxy({}, {
    defineProperty() {
      return false;
    },
    deleteProperty() {
      return false;
    },
    get(...args) {
      const [_, p] = args;
      const methodName = p.toString();
      return function(...rawParams) {
        const params = config?.parametersTransformer ? config?.parametersTransformer(rawParams, methodName) : rawParams;
        const responseTransformer = config?.responseTransformer ? config?.responseTransformer : (rawResponse) => rawResponse;
        return {
          methodName,
          params,
          responseTransformer
        };
      };
    }
  });
}

export { createRpc, createRpcApi };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.native.js.map