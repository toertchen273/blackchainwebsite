import { Callable, Flatten, OverloadImplementations, UnionToIntersection } from '@solana/rpc-spec-types';
import { RpcSubscriptionsApi } from './rpc-subscriptions-api.js';
import { PendingRpcSubscriptionsRequest } from './rpc-subscriptions-request.js';
import { RpcSubscriptionsTransport } from './rpc-subscriptions-transport.js';
export type RpcSubscriptionsConfig<TRpcMethods, TRpcSubscriptionsTransport extends RpcSubscriptionsTransport> = Readonly<{
    api: RpcSubscriptionsApi<TRpcMethods>;
    transport: TRpcSubscriptionsTransport;
}>;
export type RpcSubscriptions<TRpcSubscriptionsMethods> = {
    [TMethodName in keyof TRpcSubscriptionsMethods]: PendingRpcSubscriptionsRequestBuilder<OverloadImplementations<TRpcSubscriptionsMethods, TMethodName>>;
};
type PendingRpcSubscriptionsRequestBuilder<TSubscriptionMethodImplementations> = UnionToIntersection<Flatten<{
    [P in keyof TSubscriptionMethodImplementations]: PendingRpcSubscriptionsRequestReturnTypeMapper<TSubscriptionMethodImplementations[P]>;
}>>;
type PendingRpcSubscriptionsRequestReturnTypeMapper<TSubscriptionMethodImplementation> = TSubscriptionMethodImplementation extends Callable ? (...args: Parameters<TSubscriptionMethodImplementation>) => PendingRpcSubscriptionsRequest<ReturnType<TSubscriptionMethodImplementation>> : never;
export declare function createSubscriptionRpc<TRpcSubscriptionsApiMethods, TRpcSubscriptionsTransport extends RpcSubscriptionsTransport>(rpcConfig: RpcSubscriptionsConfig<TRpcSubscriptionsApiMethods, TRpcSubscriptionsTransport>): RpcSubscriptions<TRpcSubscriptionsApiMethods>;
export {};
//# sourceMappingURL=rpc-subscriptions.d.ts.map