'use strict';

var errors = require('@solana/errors');
var codecsStrings = require('@solana/codecs-strings');
var codecsNumbers = require('@solana/codecs-numbers');

// ../codecs-core/dist/index.browser.js
function getEncodedSize(value, encoder) {
  return "fixedSize" in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);
}
function createEncoder(encoder) {
  return Object.freeze({
    ...encoder,
    encode: (value) => {
      const bytes = new Uint8Array(getEncodedSize(value, encoder));
      encoder.write(value, bytes, 0);
      return bytes;
    }
  });
}
function createDecoder(decoder) {
  return Object.freeze({
    ...decoder,
    decode: (bytes, offset = 0) => decoder.read(bytes, offset)[0]
  });
}
function isFixedSize(codec) {
  return "fixedSize" in codec && typeof codec.fixedSize === "number";
}
function isVariableSize(codec) {
  return !isFixedSize(codec);
}
function combineCodec(encoder, decoder) {
  if (isFixedSize(encoder) !== isFixedSize(decoder)) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH);
  }
  if (isFixedSize(encoder) && isFixedSize(decoder) && encoder.fixedSize !== decoder.fixedSize) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, {
      decoderFixedSize: decoder.fixedSize,
      encoderFixedSize: encoder.fixedSize
    });
  }
  if (!isFixedSize(encoder) && !isFixedSize(decoder) && encoder.maxSize !== decoder.maxSize) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, {
      decoderMaxSize: decoder.maxSize,
      encoderMaxSize: encoder.maxSize
    });
  }
  return {
    ...decoder,
    ...encoder,
    decode: decoder.decode,
    encode: encoder.encode,
    read: decoder.read,
    write: encoder.write
  };
}
function mapEncoder(encoder, unmap) {
  return createEncoder({
    ...isVariableSize(encoder) ? { ...encoder, getSizeFromValue: (value) => encoder.getSizeFromValue(unmap(value)) } : encoder,
    write: (value, bytes, offset) => encoder.write(unmap(value), bytes, offset)
  });
}
function mapDecoder(decoder, map) {
  return createDecoder({
    ...decoder,
    read: (bytes, offset) => {
      const [value, newOffset] = decoder.read(bytes, offset);
      return [map(value, bytes, offset), newOffset];
    }
  });
}
var memoizedBase58Encoder;
var memoizedBase58Decoder;
function getMemoizedBase58Encoder() {
  if (!memoizedBase58Encoder)
    memoizedBase58Encoder = codecsStrings.getBase58Encoder();
  return memoizedBase58Encoder;
}
function getMemoizedBase58Decoder() {
  if (!memoizedBase58Decoder)
    memoizedBase58Decoder = codecsStrings.getBase58Decoder();
  return memoizedBase58Decoder;
}
function isBlockhash(putativeBlockhash) {
  if (
    // Lowest value (32 bytes of zeroes)
    putativeBlockhash.length < 32 || // Highest value (32 bytes of 255)
    putativeBlockhash.length > 44
  ) {
    return false;
  }
  const base58Encoder = getMemoizedBase58Encoder();
  const bytes = base58Encoder.encode(putativeBlockhash);
  const numBytes = bytes.byteLength;
  if (numBytes !== 32) {
    return false;
  }
  return true;
}
function assertIsBlockhash(putativeBlockhash) {
  if (
    // Lowest value (32 bytes of zeroes)
    putativeBlockhash.length < 32 || // Highest value (32 bytes of 255)
    putativeBlockhash.length > 44
  ) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE, {
      actualLength: putativeBlockhash.length
    });
  }
  const base58Encoder = getMemoizedBase58Encoder();
  const bytes = base58Encoder.encode(putativeBlockhash);
  const numBytes = bytes.byteLength;
  if (numBytes !== 32) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH, {
      actualLength: numBytes
    });
  }
}
function blockhash(putativeBlockhash) {
  assertIsBlockhash(putativeBlockhash);
  return putativeBlockhash;
}
function getBlockhashEncoder() {
  return mapEncoder(
    codecsStrings.getStringEncoder({ encoding: getMemoizedBase58Encoder(), size: 32 }),
    (putativeBlockhash) => blockhash(putativeBlockhash)
  );
}
function getBlockhashDecoder() {
  return codecsStrings.getStringDecoder({ encoding: getMemoizedBase58Decoder(), size: 32 });
}
function getBlockhashCodec() {
  return combineCodec(getBlockhashEncoder(), getBlockhashDecoder());
}
function getBlockhashComparator() {
  return new Intl.Collator("en", {
    caseFirst: "lower",
    ignorePunctuation: false,
    localeMatcher: "best fit",
    numeric: false,
    sensitivity: "variant",
    usage: "sort"
  }).compare;
}

// src/cluster-url.ts
function mainnet(putativeString) {
  return putativeString;
}
function devnet(putativeString) {
  return putativeString;
}
function testnet(putativeString) {
  return putativeString;
}
function getCommitmentScore(commitment) {
  switch (commitment) {
    case "finalized":
      return 2;
    case "confirmed":
      return 1;
    case "processed":
      return 0;
    default:
      throw new errors.SolanaError(errors.SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE, {
        unexpectedValue: commitment
      });
  }
}
function commitmentComparator(a, b) {
  if (a === b) {
    return 0;
  }
  return getCommitmentScore(a) < getCommitmentScore(b) ? -1 : 1;
}
var maxU64Value = 18446744073709551615n;
var memoizedU64Encoder;
var memoizedU64Decoder;
function getMemoizedU64Encoder() {
  if (!memoizedU64Encoder)
    memoizedU64Encoder = codecsNumbers.getU64Encoder();
  return memoizedU64Encoder;
}
function getMemoizedU64Decoder() {
  if (!memoizedU64Decoder)
    memoizedU64Decoder = codecsNumbers.getU64Decoder();
  return memoizedU64Decoder;
}
function isLamports(putativeLamports) {
  return putativeLamports >= 0 && putativeLamports <= maxU64Value;
}
function assertIsLamports(putativeLamports) {
  if (putativeLamports < 0 || putativeLamports > maxU64Value) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE);
  }
}
function lamports(putativeLamports) {
  assertIsLamports(putativeLamports);
  return putativeLamports;
}
function getLamportsEncoder() {
  return getMemoizedU64Encoder();
}
function getLamportsDecoder() {
  return mapDecoder(getMemoizedU64Decoder(), lamports);
}
function getLamportsCodec() {
  return combineCodec(getLamportsEncoder(), getLamportsDecoder());
}
function isStringifiedBigInt(putativeBigInt) {
  try {
    BigInt(putativeBigInt);
    return true;
  } catch (_) {
    return false;
  }
}
function assertIsStringifiedBigInt(putativeBigInt) {
  try {
    BigInt(putativeBigInt);
  } catch {
    throw new errors.SolanaError(errors.SOLANA_ERROR__MALFORMED_BIGINT_STRING, {
      value: putativeBigInt
    });
  }
}
function stringifiedBigInt(putativeBigInt) {
  assertIsStringifiedBigInt(putativeBigInt);
  return putativeBigInt;
}
function isStringifiedNumber(putativeNumber) {
  return !Number.isNaN(Number(putativeNumber));
}
function assertIsStringifiedNumber(putativeNumber) {
  if (Number.isNaN(Number(putativeNumber))) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__MALFORMED_NUMBER_STRING, {
      value: putativeNumber
    });
  }
}
function stringifiedNumber(putativeNumber) {
  assertIsStringifiedNumber(putativeNumber);
  return putativeNumber;
}
function isUnixTimestamp(putativeTimestamp) {
  if (putativeTimestamp > 864e13 || putativeTimestamp < -864e13) {
    return false;
  }
  return true;
}
function assertIsUnixTimestamp(putativeTimestamp) {
  if (putativeTimestamp > 864e13 || putativeTimestamp < -864e13) {
    throw new errors.SolanaError(errors.SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE, {
      value: putativeTimestamp
    });
  }
}
function unixTimestamp(putativeTimestamp) {
  assertIsUnixTimestamp(putativeTimestamp);
  return putativeTimestamp;
}

exports.assertIsBlockhash = assertIsBlockhash;
exports.assertIsLamports = assertIsLamports;
exports.assertIsStringifiedBigInt = assertIsStringifiedBigInt;
exports.assertIsStringifiedNumber = assertIsStringifiedNumber;
exports.assertIsUnixTimestamp = assertIsUnixTimestamp;
exports.blockhash = blockhash;
exports.commitmentComparator = commitmentComparator;
exports.devnet = devnet;
exports.getBlockhashCodec = getBlockhashCodec;
exports.getBlockhashComparator = getBlockhashComparator;
exports.getBlockhashDecoder = getBlockhashDecoder;
exports.getBlockhashEncoder = getBlockhashEncoder;
exports.getLamportsCodec = getLamportsCodec;
exports.getLamportsDecoder = getLamportsDecoder;
exports.getLamportsEncoder = getLamportsEncoder;
exports.isBlockhash = isBlockhash;
exports.isLamports = isLamports;
exports.isStringifiedBigInt = isStringifiedBigInt;
exports.isStringifiedNumber = isStringifiedNumber;
exports.isUnixTimestamp = isUnixTimestamp;
exports.lamports = lamports;
exports.mainnet = mainnet;
exports.stringifiedBigInt = stringifiedBigInt;
exports.stringifiedNumber = stringifiedNumber;
exports.testnet = testnet;
exports.unixTimestamp = unixTimestamp;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.browser.cjs.map