import { Address } from '@solana/addresses';
import { ITransactionWithSignatures } from './signatures.js';
import { BaseTransaction } from './types.js';
export interface ITransactionWithFeePayer<TAddress extends string = string> {
    readonly feePayer: Address<TAddress>;
}
export declare function setTransactionFeePayer<TFeePayerAddress extends string, TTransaction extends BaseTransaction>(feePayer: Address<TFeePayerAddress>, transaction: (ITransactionWithFeePayer<string> & ITransactionWithSignatures & TTransaction) | (ITransactionWithSignatures & TTransaction)): ITransactionWithFeePayer<TFeePayerAddress> & Omit<TTransaction, keyof ITransactionWithSignatures>;
export declare function setTransactionFeePayer<TFeePayerAddress extends string, TTransaction extends BaseTransaction>(feePayer: Address<TFeePayerAddress>, transaction: TTransaction | (ITransactionWithFeePayer<string> & TTransaction)): ITransactionWithFeePayer<TFeePayerAddress> & TTransaction;
//# sourceMappingURL=fee-payer.d.ts.map