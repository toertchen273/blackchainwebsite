import { Callable } from '@solana/rpc-spec-types';
import { RpcRequest } from './rpc-request.js';
export type RpcApiConfig = Readonly<{
    parametersTransformer?: <T extends unknown[]>(params: T, methodName: string) => unknown[];
    responseTransformer?: <T>(response: unknown, methodName: string) => T;
}>;
export type RpcApi<TRpcMethods> = {
    [MethodName in keyof TRpcMethods]: RpcReturnTypeMapper<TRpcMethods[MethodName]>;
};
type RpcReturnTypeMapper<TRpcMethod> = TRpcMethod extends Callable ? (...rawParams: unknown[]) => RpcRequest<ReturnType<TRpcMethod>> : never;
type RpcApiMethod = (...args: any) => any;
export interface RpcApiMethods {
    [methodName: string]: RpcApiMethod;
}
export declare function createRpcApi<TRpcMethods extends RpcApiMethods>(config?: RpcApiConfig): RpcApi<TRpcMethods>;
export {};
//# sourceMappingURL=rpc-api.d.ts.map