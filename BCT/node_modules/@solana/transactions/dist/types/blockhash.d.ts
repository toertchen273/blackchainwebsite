import { type Blockhash } from '@solana/rpc-types';
import { IDurableNonceTransaction } from './durable-nonce.js';
import { ITransactionWithSignatures } from './signatures.js';
import { BaseTransaction } from './types.js';
type BlockhashLifetimeConstraint = Readonly<{
    blockhash: Blockhash;
    lastValidBlockHeight: bigint;
}>;
export interface ITransactionWithBlockhashLifetime {
    readonly lifetimeConstraint: BlockhashLifetimeConstraint;
}
export declare function assertIsTransactionWithBlockhashLifetime(transaction: BaseTransaction | (BaseTransaction & ITransactionWithBlockhashLifetime)): asserts transaction is BaseTransaction & ITransactionWithBlockhashLifetime;
export declare function setTransactionLifetimeUsingBlockhash<TTransaction extends BaseTransaction & IDurableNonceTransaction>(blockhashLifetimeConstraint: BlockhashLifetimeConstraint, transaction: TTransaction | (ITransactionWithSignatures & TTransaction)): ITransactionWithBlockhashLifetime & Omit<TTransaction, keyof ITransactionWithSignatures | 'lifetimeConstraint'>;
export declare function setTransactionLifetimeUsingBlockhash<TTransaction extends BaseTransaction | (BaseTransaction & ITransactionWithBlockhashLifetime)>(blockhashLifetimeConstraint: BlockhashLifetimeConstraint, transaction: TTransaction | (ITransactionWithSignatures & TTransaction)): ITransactionWithBlockhashLifetime & Omit<TTransaction, keyof ITransactionWithSignatures>;
export {};
//# sourceMappingURL=blockhash.d.ts.map