import { SignatureBytes } from '@solana/keys';
import { CompilableTransaction, IFullySignedTransaction, ITransactionWithSignatures } from '@solana/transactions';
import { ITransactionWithSigners } from './account-signer-meta.js';
import { ITransactionWithSingleSendingSigner } from './transaction-with-single-sending-signer.js';
type CompilableTransactionWithSigners = CompilableTransaction & ITransactionWithSigners & Partial<ITransactionWithSignatures>;
/**
 * Signs a transaction using any signers that may be stored in IAccountSignerMeta instruction accounts
 * as well as any signers provided explicitly to this function.
 * It will ignore TransactionSendingSigners since this function does not send the transaction.
 */
export declare function partiallySignTransactionWithSigners<TTransaction extends CompilableTransactionWithSigners = CompilableTransactionWithSigners>(transaction: TTransaction, config?: {
    abortSignal?: AbortSignal;
}): Promise<ITransactionWithSignatures & TTransaction>;
/**
 * Signs a transaction using any signers that may be stored in IAccountSignerMeta instruction accounts
 * as well as any signers provided explicitly to this function.
 * It will assert that the transaction is fully signed before returning.
 * It will ignore TransactionSendingSigners since this function does not send the transaction.
 */
export declare function signTransactionWithSigners<TTransaction extends CompilableTransactionWithSigners = CompilableTransactionWithSigners>(transaction: TTransaction, config?: {
    abortSignal?: AbortSignal;
}): Promise<IFullySignedTransaction & TTransaction>;
/**
 * Signs and sends a transaction using any signers that may be stored in IAccountSignerMeta
 * instruction accounts as well as any signers provided explicitly to this function.
 * It will identify a single TransactionSendingSigners to use for sending the transaction, if any.
 * Otherwise, it will send the transaction using the provided fallbackSender.
 */
export declare function signAndSendTransactionWithSigners<TTransaction extends CompilableTransactionWithSigners & ITransactionWithSingleSendingSigner = CompilableTransactionWithSigners & ITransactionWithSingleSendingSigner>(transaction: TTransaction, config?: {
    abortSignal?: AbortSignal;
}): Promise<SignatureBytes>;
export {};
//# sourceMappingURL=sign-transaction.d.ts.map