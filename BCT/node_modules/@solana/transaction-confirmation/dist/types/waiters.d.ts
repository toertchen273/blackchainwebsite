import { Signature } from '@solana/keys';
import type { Slot } from '@solana/rpc-types';
import { IDurableNonceTransaction, ITransactionWithFeePayer, ITransactionWithSignatures } from '@solana/transactions';
import { createBlockHeightExceedencePromiseFactory } from './confirmation-strategy-blockheight.js';
import { createNonceInvalidationPromiseFactory } from './confirmation-strategy-nonce.js';
import { BaseTransactionConfirmationStrategyConfig } from './confirmation-strategy-racer.js';
import { getTimeoutPromise } from './confirmation-strategy-timeout.js';
interface WaitForDurableNonceTransactionConfirmationConfig extends BaseTransactionConfirmationStrategyConfig {
    getNonceInvalidationPromise: ReturnType<typeof createNonceInvalidationPromiseFactory>;
    transaction: IDurableNonceTransaction & ITransactionWithFeePayer & ITransactionWithSignatures;
}
interface WaitForRecentTransactionWithBlockhashLifetimeConfirmationConfig extends BaseTransactionConfirmationStrategyConfig {
    getBlockHeightExceedencePromise: ReturnType<typeof createBlockHeightExceedencePromiseFactory>;
    transaction: ITransactionWithFeePayer & ITransactionWithSignatures & Readonly<{
        lifetimeConstraint: {
            lastValidBlockHeight: Slot;
        };
    }>;
}
interface WaitForRecentTransactionWithTimeBasedLifetimeConfirmationConfig extends BaseTransactionConfirmationStrategyConfig {
    getTimeoutPromise: typeof getTimeoutPromise;
    signature: Signature;
}
export declare function waitForDurableNonceTransactionConfirmation(config: WaitForDurableNonceTransactionConfirmationConfig): Promise<void>;
export declare function waitForRecentTransactionConfirmation(config: WaitForRecentTransactionWithBlockhashLifetimeConfirmationConfig): Promise<void>;
/** @deprecated */
export declare function waitForRecentTransactionConfirmationUntilTimeout(config: WaitForRecentTransactionWithTimeBasedLifetimeConfirmationConfig): Promise<void>;
export {};
//# sourceMappingURL=waiters.d.ts.map