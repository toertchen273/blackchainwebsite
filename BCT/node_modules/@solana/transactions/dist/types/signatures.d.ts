import { Address } from '@solana/addresses';
import { Signature, SignatureBytes } from '@solana/keys';
import { CompilableTransaction } from './compilable-transaction.js';
import { ITransactionWithFeePayer } from './fee-payer.js';
export interface IFullySignedTransaction extends ITransactionWithSignatures {
    readonly __brand: unique symbol;
}
export interface ITransactionWithSignatures {
    readonly signatures: Readonly<Record<Address, SignatureBytes>>;
}
export declare function getSignatureFromTransaction(transaction: ITransactionWithFeePayer & ITransactionWithSignatures): Signature;
export declare function partiallySignTransaction<TTransaction extends CompilableTransaction>(keyPairs: CryptoKeyPair[], transaction: TTransaction | (ITransactionWithSignatures & TTransaction)): Promise<ITransactionWithSignatures & TTransaction>;
export declare function signTransaction<TTransaction extends CompilableTransaction>(keyPairs: CryptoKeyPair[], transaction: TTransaction | (ITransactionWithSignatures & TTransaction)): Promise<IFullySignedTransaction & TTransaction>;
export declare function assertTransactionIsFullySigned<TTransaction extends CompilableTransaction>(transaction: ITransactionWithSignatures & TTransaction): asserts transaction is IFullySignedTransaction & TTransaction;
//# sourceMappingURL=signatures.d.ts.map