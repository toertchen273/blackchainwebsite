{"version":3,"sources":["../src/resolve-transaction-error.ts"],"names":["program"],"mappings":";AAkBO,SAAS,wBACZ,OACA,aACA,UACK;AAEL,QAAM,WAAW,MAAM,UAAU,QAAQ,MAAM,QAAQ,CAAC,GAAG,KAAK,IAAI;AAGpE,QAAM,mBAAmB;AACzB,QAAM,yBAAyB,SAAS,MAAM,gBAAgB,IAAI,CAAC,KAAK;AACxE,QAAM,mBAAmB,yBAAyB,SAAS,wBAAwB,EAAE,IAAI;AACzF,MAAI,qBAAqB;AAAM,WAAO;AAGtC,QAAM,iBAAiB;AACvB,QAAM,kBAAkB,SAAS,MAAM,cAAc,IAAI,CAAC,KAAK;AAC/D,QAAM,YAAY,kBAAkB,SAAS,iBAAiB,EAAE,IAAI;AACpE,MAAI,cAAc;AAAM,WAAO;AAG/B,QAAM,iBAAiC,YAAY,aAAa,gBAAgB,GAAG,kBAAkB;AACrG,MAAI,CAAC;AAAgB,WAAO;AAG5B,QAAM,UACF,SAAS;AAAA,IACL,CAACA,aACGA,SAAQ,YAAY,kBAAkB,OAAOA,SAAQ,qBAAqB;AAAA,EAClF,KAAK;AACT,MAAI,CAAC;AAAS,WAAO;AAGrB,SAAO,QAAQ,iBAAiB,WAAW,KAAK;AACpD","sourcesContent":["import type { Address } from '@solana/addresses';\nimport type { Transaction } from '@solana/transactions';\n\nimport { Program, ProgramWithErrors } from './program';\n\n/**\n * Resolves a custom program error from a transaction error\n * with logs using the provided list of programs.\n * The original error is returned if the error cannot be\n * resolved from the given programs.\n *\n * @param error The raw error to resolve containing the program logs.\n * @param transaction The transaction that caused the error.\n * @param programs The list of programs to go through when resolving the transaction error.\n * They should ideally contain all programs the transaction is sending instructions to.\n * @returns The resolved program error, or the original transaction error\n * if the error cannot be resolved using the provided programs.\n */\nexport function resolveTransactionError(\n    error: Error & Readonly<{ logs?: readonly string[] }>,\n    transaction: Transaction,\n    programs: Program[],\n): Error {\n    // Compute the full logs from which to parse the instruction index and error code.\n    const fullLogs = error.message + '\\n' + (error.logs ?? []).join('\\n');\n\n    // Parse the instruction number, or return the original error.\n    const instructionRegex = /Error processing Instruction (\\d+)/;\n    const instructionIndexString = fullLogs.match(instructionRegex)?.[1] ?? null;\n    const instructionIndex = instructionIndexString ? parseInt(instructionIndexString, 10) : null;\n    if (instructionIndex === null) return error;\n\n    // Parse the error code, or return the original error.\n    const errorCodeRegex = /Custom program error: (0x[a-f0-9]+)/i;\n    const errorCodeString = fullLogs.match(errorCodeRegex)?.[1] ?? null;\n    const errorCode = errorCodeString ? parseInt(errorCodeString, 16) : null;\n    if (errorCode === null) return error;\n\n    // Get the program address from the instruction in the transaction, or return the original error.\n    const programAddress: Address | null = transaction.instructions[instructionIndex]?.programAddress ?? null;\n    if (!programAddress) return error;\n\n    // Find a matching program with error handling, or return the original error.\n    const program: ProgramWithErrors | null =\n        programs.find(\n            (program): program is Program & ProgramWithErrors =>\n                program.address === programAddress && typeof program.getErrorFromCode !== 'undefined',\n        ) ?? null;\n    if (!program) return error;\n\n    // Resolve the error from the identified program.\n    return program.getErrorFromCode(errorCode, error);\n}\n"]}